<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Performance on OpenMLS</title><link>https://blog.openmls.tech/tags/performance/</link><description>Recent content in Performance on OpenMLS</description><generator>Hugo -- 0.133.1</generator><language>en-us</language><lastBuildDate>Tue, 18 May 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://blog.openmls.tech/tags/performance/index.xml" rel="self" type="application/rss+xml"/><item><title>OpenMLS Performance</title><link>https://blog.openmls.tech/posts/2021-05-18-openmls-first-benchmarks/</link><pubDate>Tue, 18 May 2021 00:00:00 +0000</pubDate><guid>https://blog.openmls.tech/posts/2021-05-18-openmls-first-benchmarks/</guid><description>In this blog post, I explore how MLS&amp;rsquo; aspiration to be scalable manifests itself in OpenMLS.
The charter in particular claims the following:
Resource requirements have good scaling in the size of the group (preferably sub-linear)
While performance can be theoretically analysed for MLS it is also interesting to see whether the performance goals hold up in a real implementation. This of course only looks at a single implementation. Nonetheless, I think that it gives a good impression on the actual performance of MLS implementations.</description></item></channel></rss>